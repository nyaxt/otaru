syntax = "proto3";
package pb;
option go_package = "github.com/nyaxt/otaru/pb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Otaru API";
    version: "1.0";
    contact: {
      name: "Otaru project";
      url: "https://github.com/nyaxt/otaru";
      email: "ueno@nyaxtstep.com";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

message ListDirRequest {
  // If |len(id)| == 0, then query path.
  repeated uint64 id = 1;
  string path = 2;
}

enum INodeType {
  FILE = 0;
  DIR = 1;
}

message INodeView {
  uint64 id = 1;
  string name = 2;
  INodeType type = 3;
  int64 size = 4;
  uint32 uid = 5;
  uint32 gid = 6;
  uint32 perm_mode = 7;
  int64 modified_time = 8;
}

message ListDirResponse {
  message Listing {
    uint64 dir_id = 1;
    repeated INodeView entry = 2;
  }
  repeated Listing listing = 1;
}

message CreateRequest {
  // If |dir_id| == 0, then treat |name| as fullpath.
  uint64 dir_id = 1;
  string name = 2;
  uint32 uid = 3;
  uint32 gid = 4;
  uint32 perm_mode = 5;
  int64 modified_time = 6;
  INodeType type = 7;
}

message CreateResponse {
  uint64 id = 1;
  bool is_new = 2;
}

message RemoveRequest {
  // If |dir_id| == 0, then treat |name| as fullpath.
  uint64 dir_id = 1;
  string name = 2;
}

message RemoveResponse {
}

message RenameRequest {
  string path_src = 1;
  string path_dest = 2;
}

message RenameResponse {
}

message FindNodeFullPathRequest {
  string path = 1;
}

message FindNodeFullPathResponse {
  uint64 id = 1;
}

message AttrRequest {
  // If |id| == 0, then query path.
  uint64 id = 1;
  string path = 2;
}

message AttrResponse {
  INodeView entry = 1;
}

message ReadFileRequest {
  uint64 id = 1;
  uint64 offset = 2;
  uint32 length = 3;
}

message ReadFileResponse {
  bytes body = 1;
}

message WriteFileRequest {
  uint64 id = 1;
  uint64 offset = 2;
  bytes body = 3;
}

message WriteFileResponse {
}

service FileSystemService {
  rpc ListDir(ListDirRequest) returns (ListDirResponse) {
    option (google.api.http) = {
      get: "/api/v1/filesystem/ls"
    };
  }

  rpc FindNodeFullPath(FindNodeFullPathRequest) returns (FindNodeFullPathResponse) {
    option (google.api.http) = {
      get: "/api/v1/filesystem/findNode"
    };
  }

  rpc Attr(AttrRequest) returns (AttrResponse) {
    option (google.api.http) = {
      get: "/api/v1/filesystem/attr/{id}"
    };
  }

  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/filesystem/node"
      body: "*"
    };
  }

  rpc Remove(RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {
      // delete method doesn't allow body, so post
      post: "/api/v1/filesystem/node/rm"
      body: "*"
    };
  }

  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse) {
    option (google.api.http) = {
      get: "/api/v1/filesystem/file/{id}"
    };
  }

  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse) {
    option (google.api.http) = {
      put: "/api/v1/filesystem/file/{id}"
      body: "*"
    };
  }

  rpc Rename(RenameRequest) returns (RenameResponse) {
    option (google.api.http) = {
      post: "/api/v1/filesystem/node/rename"
      body: "*"
    };
  }
}

message GetBlobstoreConfigRequest {
}

message GetBlobstoreConfigResponse {
  string backend_impl_name = 1;
  string backend_flags = 2;
  string cache_impl_name = 3;
  string cache_flags = 4;
}

message ReduceCacheRequest {
  bool dry_run = 1;
  string desired_size = 2;
}

message ReduceCacheResponse {
  bool success = 1;
  string error_message = 2;
}

message GetEntriesRequest {
}

message GetEntriesResponse {
  message Entry {
    string blob_path = 1;
    string state = 2;
    int64 blob_len = 3;
    int64 valid_len = 4;
    int64 sync_count = 5;
    int64 last_used = 6;
    int64 last_write = 7;
    int64 last_sync = 8;
    int64 number_of_writer_handles = 9;
    int64 number_of_handles = 10;
  }
  repeated Entry entry = 1;
}

service BlobstoreService {
  rpc GetConfig(GetBlobstoreConfigRequest) returns (GetBlobstoreConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/blobstore/config"
    };
  };

  rpc GetEntries(GetEntriesRequest) returns (GetEntriesResponse) {
    option (google.api.http) = {
      get: "/api/v1/blobstore/entries"
    };
  };

  rpc ReduceCache(ReduceCacheRequest) returns (ReduceCacheResponse) {
    option (google.api.http) = {
      post: "/api/v1/blobstore/reduce_cache"
      body: "*"
    };
  };
}

message GetINodeDBStatsRequest {
}

message GetINodeDBStatsResponse {
  int64 last_sync = 1;
  int64 last_tx = 2;
  uint64 last_id = 3;
  uint64 version = 4;
  uint64 last_ticket = 5;
  uint32 number_of_node_locks = 6;
}

service INodeDBService {
  rpc GetINodeDBStats(GetINodeDBStatsRequest) returns (GetINodeDBStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/inodedb/stats"
    };
  }
}

message GetCategoriesRequest {
}

message GetSystemInfoRequest {
}

message SystemInfoResponse {
  string go_version = 1;
  string os = 2;
  string arch = 3;

  uint32 num_goroutine = 4;

  string hostname = 5;
  uint64 pid = 6;
  uint64 uid = 7;

  uint64 mem_alloc = 8;
  uint64 mem_sys = 9;

  uint32 num_gc = 10;
  uint32 num_fds = 11;
}

message GetVersionRequest {
}

message VersionResponse {
  string git_commit = 1;
  string build_host = 2;
}

message WhoamiRequest {
}

message WhoamiResponse {
  string role = 1;
  string user = 2;
}

message AuthTestRequest {
}

message AuthTestResponse {
}

service SystemInfoService {
  rpc GetSystemInfo(GetSystemInfoRequest) returns (SystemInfoResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/info"
    };
  };

  rpc GetVersion(GetVersionRequest) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/version"
    };
  };

  rpc Whoami(WhoamiRequest) returns (WhoamiResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/whoami"
    };
  }

  rpc AuthTestAnonymous(AuthTestRequest) returns (AuthTestResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/authtest_anonymous"
    };
  }

  rpc AuthTestReadOnly(AuthTestRequest) returns (AuthTestResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/authtest_readonly"
    };
  }

  rpc AuthTestAdmin(AuthTestRequest) returns (AuthTestResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/authtest_admin"
    };
  }
}

// otaru frontend API

message ListHostsRequest {
}

message ListHostsResponse {
  repeated string host = 1;
}

message FileInfo {
  string name = 1;
  INodeType type = 2;
  int64 size = 3;
  uint32 perm_mode = 4;
  int64 modified_time = 5;
}

message ListLocalDirRequest {
  string path = 1;
}

message ListLocalDirResponse {
  repeated FileInfo entry = 1;
}

message MkdirLocalRequest {
  string path = 1;
}

message MkdirLocalResponse {
}

message CopyLocalRequest {
  string path_src = 1;
  string path_dest = 2;
}

message CopyLocalResponse {
}

message MoveLocalRequest {
  string path_src = 1;
  string path_dest = 2;
}

message MoveLocalResponse {
}

message DownloadRequest {
  string opath_src = 1;
  string path_dest = 2;
  bool allow_overwrite = 3;
}

message DownloadResponse {
}

message UploadRequest {
  string path_src = 1;
  string opath_dest = 2;
  bool allow_overwrite = 3;
}

message UploadResponse {
}

message RemoteMoveRequest {
  string opath_src = 1;
  string opath_dest = 2;
}

message RemoteMoveResponse {
}

message RemoveLocalRequest {
  string path = 1;
  bool remove_children = 2;
}

message RemoveLocalResponse {
}

service FeService {
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {
    option (google.api.http) = {
      get: "/api/v1/fe/hosts"
    };
  }

  rpc ListLocalDir(ListLocalDirRequest) returns (ListLocalDirResponse) {
    option (google.api.http) = {
      get: "/api/v1/fe/local/ls"
    };
  }

  rpc MkdirLocal(MkdirLocalRequest) returns (MkdirLocalResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/mkdir"
      body: "*"
    };
  }

  rpc CopyLocal(CopyLocalRequest) returns (CopyLocalResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/cp"
      body: "*"
    };
  }

  rpc MoveLocal(MoveLocalRequest) returns (MoveLocalResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/mv"
      body: "*"
    };
  }

  rpc Download(DownloadRequest) returns (DownloadResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/download"
      body: "*"
    };
  }

  rpc Upload(UploadRequest) returns (UploadResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/upload"
      body: "*"
    };
  }

  rpc RemoteMove(RemoteMoveRequest) returns (RemoteMoveResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/remote_mv"
      body: "*"
    };
  }

  rpc RemoveLocal(RemoveLocalRequest) returns (RemoveLocalResponse) {
    option (google.api.http) = {
      post: "/api/v1/fe/local/rm"
      body: "*"
    };
  }
}
